service: node-crud-aws-s3-sdk-example

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-west-2
  apiName: ${self:service}
  memorySize: 128 # mb
  timeout: 10 # seconds
  environment:
    FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileBucketName}

plugins:
  - serverless-iam-roles-per-function
  
custom:
  fileBucketName: ${self:service}-${self:provider.stage}-bucket

functions:
  s3FileUploader:
    handler: src/upload.handler
    name: s3-file-uploader
    description: A lambda handler that uploads a file to an S3 bucket based on an API Gateway trigger.
    events:
      - http:
          path: files
          method: POST
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Put*"
        Resource: arn:aws:s3:::${self:custom.fileBucketName}/*
        
  s3FileGet:
    handler: src/retrieve.handler
    name: s3-file-retrieve
    description: A lambda handler that retrieves a file from an S3 bucket based on an API Gateway trigger.
    events:
      - http:
          path: files/{fileKey}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "s3:Get*"
        Resource: arn:aws:s3:::${self:custom.fileBucketName}/*

  s3FileDelete:
    handler: src/delete.handler
    name: s3-file-delete
    description: A lambda handler that deletes a file from an S3 bucket based on an API Gateway trigger.
    events:
      - http:
          path: files/{fileKey}
          method: DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:DeleteObject"
        Resource: arn:aws:s3:::${self:custom.fileBucketName}/*

resources:
  Resources:
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileBucketName}
        AccessControl: Private